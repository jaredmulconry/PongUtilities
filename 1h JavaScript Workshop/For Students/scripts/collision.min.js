"use strict";function resolveCollision(i,n){var o=arguments[2]instanceof ResolutionInfo?arguments[2]:new ResolutionInfo;switch(o.position.set(i),o.direction.set(Vector.zero),o.collision=n,n.direction){case HIT_NONE:break;case HIT_LEFT:o.position.x+=n.overlap,o.direction.x=1;break;case HIT_RIGHT:o.position.x-=n.overlap,o.direction.x=-1;break;case HIT_UP:o.position.y+=n.overlap,o.direction.y=1;break;case HIT_DOWN:o.position.y-=n.overlap,o.direction.y=-1}return o}function checkCollision(i,n){var o;return void 0!=arguments[2]&&arguments[2]instanceof CollisionInfo?(o=arguments[2],o.other=n):o=new CollisionInfo(n),calculateIntersections(i.collider.bounds,n.collider.bounds,o)}function checkBounds(i,n){var o;return void 0!=arguments[2]&&arguments[2]instanceof CollisionInfo?(o=arguments[2],o.other=n):o=new CollisionInfo(n),calculateInverseIntersections(i.bounds,n.collider.bounds,o)}function calculateInverseIntersections(i,n){var o;return o=arguments[2]instanceof CollisionInfo?arguments[2]:new CollisionInfo(void 0!=arguments[2]&&"object"==typeof arguments[2]?arguments[2]:void 0),i.l<n.l&&o.addIntersection(new AABBIntersection(HIT_LEFT,n.l-i.l)),i.r>n.r&&o.addIntersection(new AABBIntersection(HIT_RIGHT,i.r-n.r)),i.u<n.u&&o.addIntersection(new AABBIntersection(HIT_UP,n.u-i.u)),i.d>n.d&&o.addIntersection(new AABBIntersection(HIT_DOWN,i.d-n.d)),o}function calculateIntersections(i,n){var o;return o=arguments[3]instanceof CollisionInfo?arguments[3]:new CollisionInfo(void 0!=arguments[3]&&"object"==typeof arguments[3]?arguments[3]:null),(i.l-n.r<0&&i.l-n.l>0||i.r-n.l>0&&i.r-n.r<0)&&(i.d-n.u>0&&i.d-n.d<0||i.u-n.d<0&&i.u-n.u>0)&&(n.r-i.l>0&&n.r-i.l<=i.r-i.l&&o.addIntersection(new AABBIntersection(HIT_LEFT,n.r-i.l)),i.r-n.l>0&&i.r-n.l<=i.r-i.l&&o.addIntersection(new AABBIntersection(HIT_RIGHT,i.r-n.l)),n.d-i.u>0&&n.d-i.u<=i.d-i.u&&o.addIntersection(new AABBIntersection(HIT_UP,n.d-i.u)),i.d-n.u>0&&i.d-n.u<=i.d-i.u&&o.addIntersection(new AABBIntersection(HIT_DOWN,i.d-n.u))),o}var HIT_NONE=0,HIT_LEFT=1,HIT_RIGHT=2,HIT_UP=3,HIT_DOWN=4,AABB=function(i){this.position=new Vector(Vector.zero),this.size=new Vector(i),this.halfSize=this.size.scale(.5),this.bounds={l:-this.halfSize.x,r:this.halfSize.x,u:-this.halfSize.y,d:this.halfSize.y}};AABB.prototype.setPosition=function(i){this.position.set(i)},AABB.prototype.setSize=function(i){this.size.set(i),this.halfSize.set(this.size.scale(.5))},AABB.prototype.updateBounds=function(){this.bounds.l=this.position.x-this.halfSize.x,this.bounds.r=this.position.x+this.halfSize.x,this.bounds.u=this.position.y-this.halfSize.y,this.bounds.d=this.position.y+this.halfSize.y};var BoxConstraint=AABB,AABBIntersection=function(i,n){this.direction=i,this.overlap=n},CollisionInfo=function(i){this.intersections=[],this.other=i};CollisionInfo.prototype.isColliding=function(){return 0!=this.intersections.length},CollisionInfo.prototype.addIntersection=function(i){var n=this.intersections.findIndex(function(n){return n.overlap<i.overlap});this.intersections.splice(n,0,i)},CollisionInfo.prototype.getMinIntersection=function(){return this.intersections[0]};var ResolutionInfo=function(i,n,o){this.position=new Vector(i),this.direction=new Vector(n),this.collision=o};